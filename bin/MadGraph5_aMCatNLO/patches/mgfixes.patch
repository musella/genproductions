diff -ur ../orig/MG5_aMC_v2_2_1/madgraph/various/cluster.py MG5_aMC_v2_2_1/madgraph/various/cluster.py
--- ../orig/MG5_aMC_v2_2_1/madgraph/various/cluster.py  2014-09-25 16:56:11.000000001 +0200
+++ MG5_aMC_v2_2_1/madgraph/various/cluster.py  2014-10-23 21:35:59.000000001 +0200
@@ -1290,7 +1290,7 @@
             me_dir = 'a' + me_dir[1:]
         
         text = ""
-        command = ['bsub', '-J', me_dir]
+        command = ['bsub', '-C0', '-J', me_dir]
         if cwd is None:
             cwd = os.getcwd()
         else: 
@@ -1303,6 +1303,8 @@
             pass
         if log is None:
             log = '/dev/null'
+
+        text += 'if [ -n $CMSSW_BASE ]; then cd $CMSSW_BASE; eval `scramv1 runtime -sh`; cd -; fi;'
         
         text += prog
         if argument:
@@ -1364,7 +1366,7 @@
         cmd = "bjobs " + ' '.join(self.submitted_ids) 
         status = misc.Popen([cmd], shell=True, stdout=subprocess.PIPE)
 
-        idle, run, fail = 0, 0, 0
+        jobstatus = {}
         for line in status.stdout:
             line = line.strip()
             if 'JOBID' in line:
@@ -1374,18 +1376,24 @@
             if id not in self.submitted_ids:
                 continue
             status = splitline[2]
+            jobstatus[id] = status
+
+        for id in self.submitted_ids:
+            if not id in jobstatus:
+                jobstatus[id] = 'MISSING'
+                
+        idle, run, fail = 0, 0, 0
+        for id,status in jobstatus.iteritems():                
             if status == 'RUN':
                 run += 1
             elif status == 'PEND':
                 idle += 1
-            elif status == 'DONE':
+            else:
                 status = self.check_termination(id)
                 if status == 'wait':
                     run += 1
                 elif status == 'resubmit':
                     idle += 1
-            else:
-                fail += 1
 
         return idle, run, self.submitted - (idle+run+fail), fail

diff -ur old/MG5_aMC_v2_2_1/Template/LO/bin/internal/Gridpack/run.sh ./MG5_aMC_v2_2_1/Template/LO/bin/internal/Gridpack/run.sh
--- old/MG5_aMC_v2_2_1/Template/LO/bin/internal/Gridpack/run.sh 2014-09-25 16:56:11.000000000 +0200
+++ ./MG5_aMC_v2_2_1/Template/LO/bin/internal/Gridpack/run.sh   2014-09-26 02:14:50.115432890 +0200
@@ -78,37 +78,5 @@
     cd ..
 fi
 
-if [[ -e ./DECAY/decay ]]; then
-    cd DECAY
-    echo -$seed > iseed.dat
-    for ((i = 1 ;  i <= 20;  i++)) ; do
-       if [[ -e decay_$i\.in ]]; then
-           echo "Decaying events..."
-           mv ../events.lhe ../events_in.lhe
-           ./decay < decay_$i\.in
-       fi
-    done
-    cd ..
-fi
-
-if [[ -e ./REPLACE/replace.pl ]]; then
-    for ((i = 1 ;  i <= 20;  i++)) ; do
-       if [[ -e ./REPLACE/replace_card$i\.dat ]];then
-           echo "Adding flavors..."
-           mv ./events.lhe ./events_in.lhe
-           cd ./REPLACE
-           ./replace.pl ../events_in.lhe ../events.lhe < replace_card$i\.dat
-           cd ..
-       fi
-    done
-fi
-
-# part added by Stephen Mrenna to correct the kinematics of the replaced
-#  particles
-if [[ -e ./madevent/bin/internal/addmasses.py ]]; then
-  mv ./events.lhe ./events.lhe.0
-  python ./madevent/bin/internal/addmasses.py ./events.lhe.0 ./events.lhe
-fi  
-
 gzip -f events.lhe
 exit
=== modified file 'MG5_aMC_v2_2_1/MadSpin/decay.py'
--- MadSpin/decay.py    2014-09-17 09:53:23 +0000
+++ MG5_aMC_v2_2_1/MadSpin/decay.py    2014-10-14 11:29:10 +0000
@@ -1185,7 +1185,7 @@
             decaying_base = [id for id in final if abs(id) in self.decay_ids]
             decaying_base.sort()
             topo['base_order'] = (initial , final)
-            topo['matrix_element'] = me
+#            topo['matrix_element'] = me
             tags = []
             topo['tag2order'] = {}
              
@@ -2791,11 +2791,11 @@
                                          'processes': matrix_element.get('processes'),
                                          'tag': me.shell_string(pdg_order=True)}
         #
-        if __debug__:
-            #check that all decay matrix element correspond to a decay only
-            for prod in self.all_ME.values():
-                for decay in prod['matrix_element']['base_amplitude']['process']['decay_chains']:
-                    assert decay.shell_string() in self.all_decay
+#        if __debug__:
+#            #check that all decay matrix element correspond to a decay only
+#            for prod in self.all_ME.values():
+#                for decay in prod['matrix_element']['base_amplitude']['process']['decay_chains']:
+#                    assert decay.shell_string() in self.all_decay
             
         
     def get_branching_ratio(self):

=== modified file 'MG5_aMC_v2_2_1/MadSpin/decay.py'
--- MadSpin/decay.py    2014-09-17 09:53:23 +0000
+++ MG5_aMC_v2_2_1/MadSpin/decay.py    2014-10-16 13:08:38 +0000
@@ -3221,14 +3221,23 @@
             helicities=[lastline[i] for i in range(len(lastline))]
             output = trials, BWvalue, weight, momenta, failed, use_mc_masses, helicities
 
-        if len(self.calculator) > 100:
-            logger.debug('more than 100 calculator. Perform cleaning')
+        if len(self.calculator) > self.options['max_running_process']:
+            logger.debug('more than %s calculators. Perform cleaning' % self.options['max_running_process'])
             nb_calls = self.calculator_nbcall.values()
             nb_calls.sort()
             cut = max([nb_calls[len(nb_calls)//2], 0.001 * nb_calls[-1]])
             for key, external in list(self.calculator.items()):
                 nb = self.calculator_nbcall[key]
                 if nb < cut:
+                    if key[0]=='full':
+                      path=key[1]
+                      end_signal="5 0 0 0 \n"  # before closing, write down the seed 
+                      external.stdin.write(end_signal)
+                      ranmar_state=external.stdout.readline()
+                      ranmar_file=pjoin(path,'ranmar_state.dat')
+                      ranmar=open(ranmar_file, 'w')
+                      ranmar.write(ranmar_state)
+                      ranmar.close()
                     external.stdin.close()
                     external.stdout.close()
                     external.terminate()


=== modified file 'MG5_aMC_v2_2_1/madgraph/interface/madevent_interface.py'
--- madgraph/interface/madevent_interface.py    2014-09-24 19:41:18 +0000
+++ MG5_aMC_v2_2_1/madgraph/interface/madevent_interface.py    2014-10-17 15:57:21 +0000
@@ -4064,11 +4064,10 @@
             
 
             logfile = pjoin(Pdir, 'gen_ximprove.log')
-            proc = misc.Popen([pjoin(bindir, 'gen_ximprove')],
+            misc.call([pjoin(bindir, 'gen_ximprove')],
                                     stdin=subprocess.PIPE,
                                     stdout=open(logfile,'w'),
                                     cwd=Pdir)
-            proc.communicate('%s 1 F\n' % (precision))
 
             if os.path.exists(pjoin(Pdir, 'ajob1')):
                 alljobs = glob.glob(pjoin(Pdir,'ajob*'))
diff -ur ../orig/MG5_aMC_v2_2_1/madgraph/interface/amcatnlo_run_interface.py ./MG5_aMC_v2_2_1/madgraph/interface/amcatnlo_run_interface.py
--- ../orig/MG5_aMC_v2_2_1/madgraph/interface/amcatnlo_run_interface.py 2014-09-25 16:56:11.000000001 +0200
+++ ./MG5_aMC_v2_2_1/madgraph/interface/amcatnlo_run_interface.py       2014-10-25 15:34:30.000000001 +0200
@@ -3250,20 +3250,21 @@
             output_files.append('scale_pdf_dependence.dat')
 
             return self.cluster.submit2(exe, args, cwd=cwd, 
-                             input_files=input_files, output_files=output_files) 
+                             input_files=input_files, output_files=output_files, required_output=output_files) 
 
         elif 'ajob' in exe:
             # the 'standard' amcatnlo job
             # check if args is a list of string 
             if type(args[0]) == str:
-                input_files, output_files, args = self.getIO_ajob(exe,cwd, args)
+                input_files, output_files, required_output, args = self.getIO_ajob(exe,cwd, args)
                 #submitting
                 self.cluster.submit2(exe, args, cwd=cwd, 
-                             input_files=input_files, output_files=output_files)
+                             input_files=input_files, output_files=output_files, required_output=required_output)
 
                 # keep track of folders and arguments for splitted evt gen
-                if len(args) == 4 and '_' in output_files[-1]:
-                    self.split_folders[pjoin(cwd,output_files[-1])] = [exe] + args
+                subfolder=output_files[-1].split('/')[0]
+                if len(args) == 4 and '_' in subfolder:
+                    self.split_folders[pjoin(cwd,subfolder)] = [exe] + args
 
         elif 'shower' in exe:
             # a shower job
@@ -3328,6 +3329,7 @@
         
         keep_fourth_arg = False
         output_files = []
+        required_output = []
         input_files = [pjoin(self.me_dir, 'MGMEVersion.txt'),
                      pjoin(self.me_dir, 'SubProcesses', 'randinit'),
                      pjoin(cwd, 'symfact.dat'),
@@ -3397,12 +3399,13 @@
             input_files.append(pjoin(cwd, 'madevent_mintMC'))
             if args[2] in ['0','2']:
                 input_files.append(pjoin(self.me_dir, 'SubProcesses','madinMMC_%s.2' % args[1]))
+                
+
 
             for i in subdir:
                 current = 'G%s%s' % (args[1], i)
                 if os.path.exists(pjoin(cwd,current)):
                     input_files.append(pjoin(cwd, current))
-                output_files.append(current)
                 if len(args) == 4 and args[3] in ['H','S','V','B','F']:
                     # use a grid train on another part
                     base = '%s_%s' % (args[3],i)
@@ -3413,7 +3416,18 @@
                 elif len(args) ==4:
                     keep_fourth_arg = True
                     # this is for the split event generation
-                    output_files.append('G%s%s_%s' % (args[1], i, args[3]))
+                    current = 'G%s%s_%s' % (args[1], i, args[3])
+                    
+                output_files.append('%s/log_MINT%s.txt' % (current,args[2]))
+                required_output.append('%s/log_MINT%s.txt' % (current,args[2]))
+                if args[2] in ['0','1']:
+                    output_files.append('%s/res_%s' % (current,args[2]))
+                    required_output.append('%s/res_%s' % (current,args[2]))
+                if args[2] == '1':
+                    output_files.append('%s/results.dat' % current)
+                    required_output.append('%s/results.dat' % current)
+                elif args[2] == '2':
+                    output_files.append('%s/events.lhe' % current)                
 
         else:
             raise aMCatNLOError, 'not valid arguments: %s' %(', '.join(args))
@@ -3426,7 +3440,7 @@
         if len(args) == 4 and not keep_fourth_arg:
             args = args[:3]
             
-        return input_files, output_files, args
+        return input_files, output_files, required_output, args
             
     def write_madinMMC_file(self, path, run_mode, mint_mode):
         """writes the madinMMC_?.2 file"""
